//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: order/orderSystem.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// ========== 服务接口 ==========
///
/// Usage: instantiate `Ordersystem_OrderServiceClient`, then call methods of this protocol to make API calls.
internal protocol Ordersystem_OrderServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Ordersystem_OrderServiceClientInterceptorFactoryProtocol? { get }

  func createOrder(
    _ request: Ordersystem_CreateOrderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ordersystem_CreateOrderRequest, Ordersystem_OrderResponse>

  func getOrder(
    _ request: Ordersystem_GetOrderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ordersystem_GetOrderRequest, Ordersystem_OrderResponse>

  func cancelOrder(
    _ request: Ordersystem_CancelOrderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ordersystem_CancelOrderRequest, Ordersystem_OrderResponse>

  func processPayment(
    _ request: Ordersystem_PaymentRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ordersystem_PaymentRequest, Ordersystem_PaymentResponse>

  func updateStock(
    _ request: Ordersystem_StockUpdateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ordersystem_StockUpdateRequest, Ordersystem_StockUpdateResponse>
}

extension Ordersystem_OrderServiceClientProtocol {
  internal var serviceName: String {
    return "ordersystem.OrderService"
  }

  /// 订单操作
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createOrder(
    _ request: Ordersystem_CreateOrderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ordersystem_CreateOrderRequest, Ordersystem_OrderResponse> {
    return self.makeUnaryCall(
      path: Ordersystem_OrderServiceClientMetadata.Methods.createOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateOrderInterceptors() ?? []
    )
  }

  /// Unary call to GetOrder
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getOrder(
    _ request: Ordersystem_GetOrderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ordersystem_GetOrderRequest, Ordersystem_OrderResponse> {
    return self.makeUnaryCall(
      path: Ordersystem_OrderServiceClientMetadata.Methods.getOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOrderInterceptors() ?? []
    )
  }

  /// Unary call to CancelOrder
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cancelOrder(
    _ request: Ordersystem_CancelOrderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ordersystem_CancelOrderRequest, Ordersystem_OrderResponse> {
    return self.makeUnaryCall(
      path: Ordersystem_OrderServiceClientMetadata.Methods.cancelOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelOrderInterceptors() ?? []
    )
  }

  /// 支付集成
  ///
  /// - Parameters:
  ///   - request: Request to send to ProcessPayment.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func processPayment(
    _ request: Ordersystem_PaymentRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ordersystem_PaymentRequest, Ordersystem_PaymentResponse> {
    return self.makeUnaryCall(
      path: Ordersystem_OrderServiceClientMetadata.Methods.processPayment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProcessPaymentInterceptors() ?? []
    )
  }

  /// 库存管理
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateStock.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateStock(
    _ request: Ordersystem_StockUpdateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ordersystem_StockUpdateRequest, Ordersystem_StockUpdateResponse> {
    return self.makeUnaryCall(
      path: Ordersystem_OrderServiceClientMetadata.Methods.updateStock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateStockInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Ordersystem_OrderServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Ordersystem_OrderServiceNIOClient")
internal final class Ordersystem_OrderServiceClient: Ordersystem_OrderServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Ordersystem_OrderServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Ordersystem_OrderServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the ordersystem.OrderService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ordersystem_OrderServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Ordersystem_OrderServiceNIOClient: Ordersystem_OrderServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ordersystem_OrderServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the ordersystem.OrderService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ordersystem_OrderServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// ========== 服务接口 ==========
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Ordersystem_OrderServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ordersystem_OrderServiceClientInterceptorFactoryProtocol? { get }

  func makeCreateOrderCall(
    _ request: Ordersystem_CreateOrderRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ordersystem_CreateOrderRequest, Ordersystem_OrderResponse>

  func makeGetOrderCall(
    _ request: Ordersystem_GetOrderRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ordersystem_GetOrderRequest, Ordersystem_OrderResponse>

  func makeCancelOrderCall(
    _ request: Ordersystem_CancelOrderRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ordersystem_CancelOrderRequest, Ordersystem_OrderResponse>

  func makeProcessPaymentCall(
    _ request: Ordersystem_PaymentRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ordersystem_PaymentRequest, Ordersystem_PaymentResponse>

  func makeUpdateStockCall(
    _ request: Ordersystem_StockUpdateRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Ordersystem_StockUpdateRequest, Ordersystem_StockUpdateResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ordersystem_OrderServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Ordersystem_OrderServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Ordersystem_OrderServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateOrderCall(
    _ request: Ordersystem_CreateOrderRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ordersystem_CreateOrderRequest, Ordersystem_OrderResponse> {
    return self.makeAsyncUnaryCall(
      path: Ordersystem_OrderServiceClientMetadata.Methods.createOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateOrderInterceptors() ?? []
    )
  }

  internal func makeGetOrderCall(
    _ request: Ordersystem_GetOrderRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ordersystem_GetOrderRequest, Ordersystem_OrderResponse> {
    return self.makeAsyncUnaryCall(
      path: Ordersystem_OrderServiceClientMetadata.Methods.getOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOrderInterceptors() ?? []
    )
  }

  internal func makeCancelOrderCall(
    _ request: Ordersystem_CancelOrderRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ordersystem_CancelOrderRequest, Ordersystem_OrderResponse> {
    return self.makeAsyncUnaryCall(
      path: Ordersystem_OrderServiceClientMetadata.Methods.cancelOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelOrderInterceptors() ?? []
    )
  }

  internal func makeProcessPaymentCall(
    _ request: Ordersystem_PaymentRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ordersystem_PaymentRequest, Ordersystem_PaymentResponse> {
    return self.makeAsyncUnaryCall(
      path: Ordersystem_OrderServiceClientMetadata.Methods.processPayment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProcessPaymentInterceptors() ?? []
    )
  }

  internal func makeUpdateStockCall(
    _ request: Ordersystem_StockUpdateRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Ordersystem_StockUpdateRequest, Ordersystem_StockUpdateResponse> {
    return self.makeAsyncUnaryCall(
      path: Ordersystem_OrderServiceClientMetadata.Methods.updateStock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateStockInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ordersystem_OrderServiceAsyncClientProtocol {
  internal func createOrder(
    _ request: Ordersystem_CreateOrderRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ordersystem_OrderResponse {
    return try await self.performAsyncUnaryCall(
      path: Ordersystem_OrderServiceClientMetadata.Methods.createOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateOrderInterceptors() ?? []
    )
  }

  internal func getOrder(
    _ request: Ordersystem_GetOrderRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ordersystem_OrderResponse {
    return try await self.performAsyncUnaryCall(
      path: Ordersystem_OrderServiceClientMetadata.Methods.getOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOrderInterceptors() ?? []
    )
  }

  internal func cancelOrder(
    _ request: Ordersystem_CancelOrderRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ordersystem_OrderResponse {
    return try await self.performAsyncUnaryCall(
      path: Ordersystem_OrderServiceClientMetadata.Methods.cancelOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCancelOrderInterceptors() ?? []
    )
  }

  internal func processPayment(
    _ request: Ordersystem_PaymentRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ordersystem_PaymentResponse {
    return try await self.performAsyncUnaryCall(
      path: Ordersystem_OrderServiceClientMetadata.Methods.processPayment.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProcessPaymentInterceptors() ?? []
    )
  }

  internal func updateStock(
    _ request: Ordersystem_StockUpdateRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Ordersystem_StockUpdateResponse {
    return try await self.performAsyncUnaryCall(
      path: Ordersystem_OrderServiceClientMetadata.Methods.updateStock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateStockInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Ordersystem_OrderServiceAsyncClient: Ordersystem_OrderServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ordersystem_OrderServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ordersystem_OrderServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Ordersystem_OrderServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createOrder'.
  func makeCreateOrderInterceptors() -> [ClientInterceptor<Ordersystem_CreateOrderRequest, Ordersystem_OrderResponse>]

  /// - Returns: Interceptors to use when invoking 'getOrder'.
  func makeGetOrderInterceptors() -> [ClientInterceptor<Ordersystem_GetOrderRequest, Ordersystem_OrderResponse>]

  /// - Returns: Interceptors to use when invoking 'cancelOrder'.
  func makeCancelOrderInterceptors() -> [ClientInterceptor<Ordersystem_CancelOrderRequest, Ordersystem_OrderResponse>]

  /// - Returns: Interceptors to use when invoking 'processPayment'.
  func makeProcessPaymentInterceptors() -> [ClientInterceptor<Ordersystem_PaymentRequest, Ordersystem_PaymentResponse>]

  /// - Returns: Interceptors to use when invoking 'updateStock'.
  func makeUpdateStockInterceptors() -> [ClientInterceptor<Ordersystem_StockUpdateRequest, Ordersystem_StockUpdateResponse>]
}

internal enum Ordersystem_OrderServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "OrderService",
    fullName: "ordersystem.OrderService",
    methods: [
      Ordersystem_OrderServiceClientMetadata.Methods.createOrder,
      Ordersystem_OrderServiceClientMetadata.Methods.getOrder,
      Ordersystem_OrderServiceClientMetadata.Methods.cancelOrder,
      Ordersystem_OrderServiceClientMetadata.Methods.processPayment,
      Ordersystem_OrderServiceClientMetadata.Methods.updateStock,
    ]
  )

  internal enum Methods {
    internal static let createOrder = GRPCMethodDescriptor(
      name: "CreateOrder",
      path: "/ordersystem.OrderService/CreateOrder",
      type: GRPCCallType.unary
    )

    internal static let getOrder = GRPCMethodDescriptor(
      name: "GetOrder",
      path: "/ordersystem.OrderService/GetOrder",
      type: GRPCCallType.unary
    )

    internal static let cancelOrder = GRPCMethodDescriptor(
      name: "CancelOrder",
      path: "/ordersystem.OrderService/CancelOrder",
      type: GRPCCallType.unary
    )

    internal static let processPayment = GRPCMethodDescriptor(
      name: "ProcessPayment",
      path: "/ordersystem.OrderService/ProcessPayment",
      type: GRPCCallType.unary
    )

    internal static let updateStock = GRPCMethodDescriptor(
      name: "UpdateStock",
      path: "/ordersystem.OrderService/UpdateStock",
      type: GRPCCallType.unary
    )
  }
}

/// ========== 服务接口 ==========
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Ordersystem_OrderServiceProvider: CallHandlerProvider {
  var interceptors: Ordersystem_OrderServiceServerInterceptorFactoryProtocol? { get }

  /// 订单操作
  func createOrder(request: Ordersystem_CreateOrderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ordersystem_OrderResponse>

  func getOrder(request: Ordersystem_GetOrderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ordersystem_OrderResponse>

  func cancelOrder(request: Ordersystem_CancelOrderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ordersystem_OrderResponse>

  /// 支付集成
  func processPayment(request: Ordersystem_PaymentRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ordersystem_PaymentResponse>

  /// 库存管理
  func updateStock(request: Ordersystem_StockUpdateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Ordersystem_StockUpdateResponse>
}

extension Ordersystem_OrderServiceProvider {
  internal var serviceName: Substring {
    return Ordersystem_OrderServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ordersystem_CreateOrderRequest>(),
        responseSerializer: ProtobufSerializer<Ordersystem_OrderResponse>(),
        interceptors: self.interceptors?.makeCreateOrderInterceptors() ?? [],
        userFunction: self.createOrder(request:context:)
      )

    case "GetOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ordersystem_GetOrderRequest>(),
        responseSerializer: ProtobufSerializer<Ordersystem_OrderResponse>(),
        interceptors: self.interceptors?.makeGetOrderInterceptors() ?? [],
        userFunction: self.getOrder(request:context:)
      )

    case "CancelOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ordersystem_CancelOrderRequest>(),
        responseSerializer: ProtobufSerializer<Ordersystem_OrderResponse>(),
        interceptors: self.interceptors?.makeCancelOrderInterceptors() ?? [],
        userFunction: self.cancelOrder(request:context:)
      )

    case "ProcessPayment":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ordersystem_PaymentRequest>(),
        responseSerializer: ProtobufSerializer<Ordersystem_PaymentResponse>(),
        interceptors: self.interceptors?.makeProcessPaymentInterceptors() ?? [],
        userFunction: self.processPayment(request:context:)
      )

    case "UpdateStock":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ordersystem_StockUpdateRequest>(),
        responseSerializer: ProtobufSerializer<Ordersystem_StockUpdateResponse>(),
        interceptors: self.interceptors?.makeUpdateStockInterceptors() ?? [],
        userFunction: self.updateStock(request:context:)
      )

    default:
      return nil
    }
  }
}

/// ========== 服务接口 ==========
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Ordersystem_OrderServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Ordersystem_OrderServiceServerInterceptorFactoryProtocol? { get }

  /// 订单操作
  func createOrder(
    request: Ordersystem_CreateOrderRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ordersystem_OrderResponse

  func getOrder(
    request: Ordersystem_GetOrderRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ordersystem_OrderResponse

  func cancelOrder(
    request: Ordersystem_CancelOrderRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ordersystem_OrderResponse

  /// 支付集成
  func processPayment(
    request: Ordersystem_PaymentRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ordersystem_PaymentResponse

  /// 库存管理
  func updateStock(
    request: Ordersystem_StockUpdateRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Ordersystem_StockUpdateResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Ordersystem_OrderServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Ordersystem_OrderServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Ordersystem_OrderServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Ordersystem_OrderServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateOrder":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ordersystem_CreateOrderRequest>(),
        responseSerializer: ProtobufSerializer<Ordersystem_OrderResponse>(),
        interceptors: self.interceptors?.makeCreateOrderInterceptors() ?? [],
        wrapping: { try await self.createOrder(request: $0, context: $1) }
      )

    case "GetOrder":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ordersystem_GetOrderRequest>(),
        responseSerializer: ProtobufSerializer<Ordersystem_OrderResponse>(),
        interceptors: self.interceptors?.makeGetOrderInterceptors() ?? [],
        wrapping: { try await self.getOrder(request: $0, context: $1) }
      )

    case "CancelOrder":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ordersystem_CancelOrderRequest>(),
        responseSerializer: ProtobufSerializer<Ordersystem_OrderResponse>(),
        interceptors: self.interceptors?.makeCancelOrderInterceptors() ?? [],
        wrapping: { try await self.cancelOrder(request: $0, context: $1) }
      )

    case "ProcessPayment":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ordersystem_PaymentRequest>(),
        responseSerializer: ProtobufSerializer<Ordersystem_PaymentResponse>(),
        interceptors: self.interceptors?.makeProcessPaymentInterceptors() ?? [],
        wrapping: { try await self.processPayment(request: $0, context: $1) }
      )

    case "UpdateStock":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Ordersystem_StockUpdateRequest>(),
        responseSerializer: ProtobufSerializer<Ordersystem_StockUpdateResponse>(),
        interceptors: self.interceptors?.makeUpdateStockInterceptors() ?? [],
        wrapping: { try await self.updateStock(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Ordersystem_OrderServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'createOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateOrderInterceptors() -> [ServerInterceptor<Ordersystem_CreateOrderRequest, Ordersystem_OrderResponse>]

  /// - Returns: Interceptors to use when handling 'getOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetOrderInterceptors() -> [ServerInterceptor<Ordersystem_GetOrderRequest, Ordersystem_OrderResponse>]

  /// - Returns: Interceptors to use when handling 'cancelOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCancelOrderInterceptors() -> [ServerInterceptor<Ordersystem_CancelOrderRequest, Ordersystem_OrderResponse>]

  /// - Returns: Interceptors to use when handling 'processPayment'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeProcessPaymentInterceptors() -> [ServerInterceptor<Ordersystem_PaymentRequest, Ordersystem_PaymentResponse>]

  /// - Returns: Interceptors to use when handling 'updateStock'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateStockInterceptors() -> [ServerInterceptor<Ordersystem_StockUpdateRequest, Ordersystem_StockUpdateResponse>]
}

internal enum Ordersystem_OrderServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "OrderService",
    fullName: "ordersystem.OrderService",
    methods: [
      Ordersystem_OrderServiceServerMetadata.Methods.createOrder,
      Ordersystem_OrderServiceServerMetadata.Methods.getOrder,
      Ordersystem_OrderServiceServerMetadata.Methods.cancelOrder,
      Ordersystem_OrderServiceServerMetadata.Methods.processPayment,
      Ordersystem_OrderServiceServerMetadata.Methods.updateStock,
    ]
  )

  internal enum Methods {
    internal static let createOrder = GRPCMethodDescriptor(
      name: "CreateOrder",
      path: "/ordersystem.OrderService/CreateOrder",
      type: GRPCCallType.unary
    )

    internal static let getOrder = GRPCMethodDescriptor(
      name: "GetOrder",
      path: "/ordersystem.OrderService/GetOrder",
      type: GRPCCallType.unary
    )

    internal static let cancelOrder = GRPCMethodDescriptor(
      name: "CancelOrder",
      path: "/ordersystem.OrderService/CancelOrder",
      type: GRPCCallType.unary
    )

    internal static let processPayment = GRPCMethodDescriptor(
      name: "ProcessPayment",
      path: "/ordersystem.OrderService/ProcessPayment",
      type: GRPCCallType.unary
    )

    internal static let updateStock = GRPCMethodDescriptor(
      name: "UpdateStock",
      path: "/ordersystem.OrderService/UpdateStock",
      type: GRPCCallType.unary
    )
  }
}
