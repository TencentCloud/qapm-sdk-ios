//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: hello.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `HelloServiceClient`, then call methods of this protocol to make API calls.
internal protocol HelloServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: HelloServiceClientInterceptorFactoryProtocol? { get }

  func sayHello(
    _ request: HelloRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<HelloRequest, HelloResponse>

  func sayHelloServerStream(
    _ request: HelloRequest,
    callOptions: CallOptions?,
    handler: @escaping (HelloResponse) -> Void
  ) -> ServerStreamingCall<HelloRequest, HelloResponse>

  func sayHelloClientStream(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<HelloRequest, HelloResponse>

  func sayHelloBidiStream(
    callOptions: CallOptions?,
    handler: @escaping (HelloResponse) -> Void
  ) -> BidirectionalStreamingCall<HelloRequest, HelloResponse>
}

extension HelloServiceClientProtocol {
  internal var serviceName: String {
    return "HelloService"
  }

  /// 1. 一元式（Unary，保留原始方法）
  ///
  /// - Parameters:
  ///   - request: Request to send to SayHello.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sayHello(
    _ request: HelloRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<HelloRequest, HelloResponse> {
    return self.makeUnaryCall(
      path: HelloServiceClientMetadata.Methods.sayHello.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloInterceptors() ?? []
    )
  }

  /// 2. 服务端流式（Server-streaming）
  ///
  /// - Parameters:
  ///   - request: Request to send to SayHelloServerStream.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func sayHelloServerStream(
    _ request: HelloRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (HelloResponse) -> Void
  ) -> ServerStreamingCall<HelloRequest, HelloResponse> {
    return self.makeServerStreamingCall(
      path: HelloServiceClientMetadata.Methods.sayHelloServerStream.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloServerStreamInterceptors() ?? [],
      handler: handler
    )
  }

  /// 3. 客户端流式（Client-streaming）
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  internal func sayHelloClientStream(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<HelloRequest, HelloResponse> {
    return self.makeClientStreamingCall(
      path: HelloServiceClientMetadata.Methods.sayHelloClientStream.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloClientStreamInterceptors() ?? []
    )
  }

  /// 4. 双向流式（Bidirectional-streaming）
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func sayHelloBidiStream(
    callOptions: CallOptions? = nil,
    handler: @escaping (HelloResponse) -> Void
  ) -> BidirectionalStreamingCall<HelloRequest, HelloResponse> {
    return self.makeBidirectionalStreamingCall(
      path: HelloServiceClientMetadata.Methods.sayHelloBidiStream.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloBidiStreamInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension HelloServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "HelloServiceNIOClient")
internal final class HelloServiceClient: HelloServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: HelloServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: HelloServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the HelloService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: HelloServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct HelloServiceNIOClient: HelloServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: HelloServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the HelloService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: HelloServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol HelloServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: HelloServiceClientInterceptorFactoryProtocol? { get }

  func makeSayHelloCall(
    _ request: HelloRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<HelloRequest, HelloResponse>

  func makeSayHelloServerStreamCall(
    _ request: HelloRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<HelloRequest, HelloResponse>

  func makeSayHelloClientStreamCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncClientStreamingCall<HelloRequest, HelloResponse>

  func makeSayHelloBidiStreamCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<HelloRequest, HelloResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension HelloServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return HelloServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: HelloServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeSayHelloCall(
    _ request: HelloRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<HelloRequest, HelloResponse> {
    return self.makeAsyncUnaryCall(
      path: HelloServiceClientMetadata.Methods.sayHello.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloInterceptors() ?? []
    )
  }

  internal func makeSayHelloServerStreamCall(
    _ request: HelloRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<HelloRequest, HelloResponse> {
    return self.makeAsyncServerStreamingCall(
      path: HelloServiceClientMetadata.Methods.sayHelloServerStream.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloServerStreamInterceptors() ?? []
    )
  }

  internal func makeSayHelloClientStreamCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncClientStreamingCall<HelloRequest, HelloResponse> {
    return self.makeAsyncClientStreamingCall(
      path: HelloServiceClientMetadata.Methods.sayHelloClientStream.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloClientStreamInterceptors() ?? []
    )
  }

  internal func makeSayHelloBidiStreamCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<HelloRequest, HelloResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: HelloServiceClientMetadata.Methods.sayHelloBidiStream.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloBidiStreamInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension HelloServiceAsyncClientProtocol {
  internal func sayHello(
    _ request: HelloRequest,
    callOptions: CallOptions? = nil
  ) async throws -> HelloResponse {
    return try await self.performAsyncUnaryCall(
      path: HelloServiceClientMetadata.Methods.sayHello.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloInterceptors() ?? []
    )
  }

  internal func sayHelloServerStream(
    _ request: HelloRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<HelloResponse> {
    return self.performAsyncServerStreamingCall(
      path: HelloServiceClientMetadata.Methods.sayHelloServerStream.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloServerStreamInterceptors() ?? []
    )
  }

  internal func sayHelloClientStream<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> HelloResponse where RequestStream: Sequence, RequestStream.Element == HelloRequest {
    return try await self.performAsyncClientStreamingCall(
      path: HelloServiceClientMetadata.Methods.sayHelloClientStream.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloClientStreamInterceptors() ?? []
    )
  }

  internal func sayHelloClientStream<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> HelloResponse where RequestStream: AsyncSequence & Sendable, RequestStream.Element == HelloRequest {
    return try await self.performAsyncClientStreamingCall(
      path: HelloServiceClientMetadata.Methods.sayHelloClientStream.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloClientStreamInterceptors() ?? []
    )
  }

  internal func sayHelloBidiStream<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<HelloResponse> where RequestStream: Sequence, RequestStream.Element == HelloRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: HelloServiceClientMetadata.Methods.sayHelloBidiStream.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloBidiStreamInterceptors() ?? []
    )
  }

  internal func sayHelloBidiStream<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<HelloResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == HelloRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: HelloServiceClientMetadata.Methods.sayHelloBidiStream.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloBidiStreamInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct HelloServiceAsyncClient: HelloServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: HelloServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: HelloServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol HelloServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'sayHello'.
  func makeSayHelloInterceptors() -> [ClientInterceptor<HelloRequest, HelloResponse>]

  /// - Returns: Interceptors to use when invoking 'sayHelloServerStream'.
  func makeSayHelloServerStreamInterceptors() -> [ClientInterceptor<HelloRequest, HelloResponse>]

  /// - Returns: Interceptors to use when invoking 'sayHelloClientStream'.
  func makeSayHelloClientStreamInterceptors() -> [ClientInterceptor<HelloRequest, HelloResponse>]

  /// - Returns: Interceptors to use when invoking 'sayHelloBidiStream'.
  func makeSayHelloBidiStreamInterceptors() -> [ClientInterceptor<HelloRequest, HelloResponse>]
}

internal enum HelloServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "HelloService",
    fullName: "HelloService",
    methods: [
      HelloServiceClientMetadata.Methods.sayHello,
      HelloServiceClientMetadata.Methods.sayHelloServerStream,
      HelloServiceClientMetadata.Methods.sayHelloClientStream,
      HelloServiceClientMetadata.Methods.sayHelloBidiStream,
    ]
  )

  internal enum Methods {
    internal static let sayHello = GRPCMethodDescriptor(
      name: "SayHello",
      path: "/HelloService/SayHello",
      type: GRPCCallType.unary
    )

    internal static let sayHelloServerStream = GRPCMethodDescriptor(
      name: "SayHelloServerStream",
      path: "/HelloService/SayHelloServerStream",
      type: GRPCCallType.serverStreaming
    )

    internal static let sayHelloClientStream = GRPCMethodDescriptor(
      name: "SayHelloClientStream",
      path: "/HelloService/SayHelloClientStream",
      type: GRPCCallType.clientStreaming
    )

    internal static let sayHelloBidiStream = GRPCMethodDescriptor(
      name: "SayHelloBidiStream",
      path: "/HelloService/SayHelloBidiStream",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}

/// Usage: instantiate `GreeterClient`, then call methods of this protocol to make API calls.
internal protocol GreeterClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: GreeterClientInterceptorFactoryProtocol? { get }

  func sayHello(
    _ request: HelloRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<HelloRequest, HelloResponse>
}

extension GreeterClientProtocol {
  internal var serviceName: String {
    return "Greeter"
  }

  /// Unary call to SayHello
  ///
  /// - Parameters:
  ///   - request: Request to send to SayHello.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sayHello(
    _ request: HelloRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<HelloRequest, HelloResponse> {
    return self.makeUnaryCall(
      path: GreeterClientMetadata.Methods.sayHello.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension GreeterClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "GreeterNIOClient")
internal final class GreeterClient: GreeterClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: GreeterClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: GreeterClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the Greeter service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: GreeterClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct GreeterNIOClient: GreeterClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: GreeterClientInterceptorFactoryProtocol?

  /// Creates a client for the Greeter service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: GreeterClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol GreeterAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: GreeterClientInterceptorFactoryProtocol? { get }

  func makeSayHelloCall(
    _ request: HelloRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<HelloRequest, HelloResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension GreeterAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return GreeterClientMetadata.serviceDescriptor
  }

  internal var interceptors: GreeterClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeSayHelloCall(
    _ request: HelloRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<HelloRequest, HelloResponse> {
    return self.makeAsyncUnaryCall(
      path: GreeterClientMetadata.Methods.sayHello.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension GreeterAsyncClientProtocol {
  internal func sayHello(
    _ request: HelloRequest,
    callOptions: CallOptions? = nil
  ) async throws -> HelloResponse {
    return try await self.performAsyncUnaryCall(
      path: GreeterClientMetadata.Methods.sayHello.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct GreeterAsyncClient: GreeterAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: GreeterClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: GreeterClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol GreeterClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'sayHello'.
  func makeSayHelloInterceptors() -> [ClientInterceptor<HelloRequest, HelloResponse>]
}

internal enum GreeterClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Greeter",
    fullName: "Greeter",
    methods: [
      GreeterClientMetadata.Methods.sayHello,
    ]
  )

  internal enum Methods {
    internal static let sayHello = GRPCMethodDescriptor(
      name: "SayHello",
      path: "/Greeter/SayHello",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol HelloServiceProvider: CallHandlerProvider {
  var interceptors: HelloServiceServerInterceptorFactoryProtocol? { get }

  /// 1. 一元式（Unary，保留原始方法）
  func sayHello(request: HelloRequest, context: StatusOnlyCallContext) -> EventLoopFuture<HelloResponse>

  /// 2. 服务端流式（Server-streaming）
  func sayHelloServerStream(request: HelloRequest, context: StreamingResponseCallContext<HelloResponse>) -> EventLoopFuture<GRPCStatus>

  /// 3. 客户端流式（Client-streaming）
  func sayHelloClientStream(context: UnaryResponseCallContext<HelloResponse>) -> EventLoopFuture<(StreamEvent<HelloRequest>) -> Void>

  /// 4. 双向流式（Bidirectional-streaming）
  func sayHelloBidiStream(context: StreamingResponseCallContext<HelloResponse>) -> EventLoopFuture<(StreamEvent<HelloRequest>) -> Void>
}

extension HelloServiceProvider {
  internal var serviceName: Substring {
    return HelloServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SayHello":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<HelloRequest>(),
        responseSerializer: ProtobufSerializer<HelloResponse>(),
        interceptors: self.interceptors?.makeSayHelloInterceptors() ?? [],
        userFunction: self.sayHello(request:context:)
      )

    case "SayHelloServerStream":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<HelloRequest>(),
        responseSerializer: ProtobufSerializer<HelloResponse>(),
        interceptors: self.interceptors?.makeSayHelloServerStreamInterceptors() ?? [],
        userFunction: self.sayHelloServerStream(request:context:)
      )

    case "SayHelloClientStream":
      return ClientStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<HelloRequest>(),
        responseSerializer: ProtobufSerializer<HelloResponse>(),
        interceptors: self.interceptors?.makeSayHelloClientStreamInterceptors() ?? [],
        observerFactory: self.sayHelloClientStream(context:)
      )

    case "SayHelloBidiStream":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<HelloRequest>(),
        responseSerializer: ProtobufSerializer<HelloResponse>(),
        interceptors: self.interceptors?.makeSayHelloBidiStreamInterceptors() ?? [],
        observerFactory: self.sayHelloBidiStream(context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol HelloServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: HelloServiceServerInterceptorFactoryProtocol? { get }

  /// 1. 一元式（Unary，保留原始方法）
  func sayHello(
    request: HelloRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> HelloResponse

  /// 2. 服务端流式（Server-streaming）
  func sayHelloServerStream(
    request: HelloRequest,
    responseStream: GRPCAsyncResponseStreamWriter<HelloResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// 3. 客户端流式（Client-streaming）
  func sayHelloClientStream(
    requestStream: GRPCAsyncRequestStream<HelloRequest>,
    context: GRPCAsyncServerCallContext
  ) async throws -> HelloResponse

  /// 4. 双向流式（Bidirectional-streaming）
  func sayHelloBidiStream(
    requestStream: GRPCAsyncRequestStream<HelloRequest>,
    responseStream: GRPCAsyncResponseStreamWriter<HelloResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension HelloServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return HelloServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return HelloServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: HelloServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SayHello":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<HelloRequest>(),
        responseSerializer: ProtobufSerializer<HelloResponse>(),
        interceptors: self.interceptors?.makeSayHelloInterceptors() ?? [],
        wrapping: { try await self.sayHello(request: $0, context: $1) }
      )

    case "SayHelloServerStream":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<HelloRequest>(),
        responseSerializer: ProtobufSerializer<HelloResponse>(),
        interceptors: self.interceptors?.makeSayHelloServerStreamInterceptors() ?? [],
        wrapping: { try await self.sayHelloServerStream(request: $0, responseStream: $1, context: $2) }
      )

    case "SayHelloClientStream":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<HelloRequest>(),
        responseSerializer: ProtobufSerializer<HelloResponse>(),
        interceptors: self.interceptors?.makeSayHelloClientStreamInterceptors() ?? [],
        wrapping: { try await self.sayHelloClientStream(requestStream: $0, context: $1) }
      )

    case "SayHelloBidiStream":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<HelloRequest>(),
        responseSerializer: ProtobufSerializer<HelloResponse>(),
        interceptors: self.interceptors?.makeSayHelloBidiStreamInterceptors() ?? [],
        wrapping: { try await self.sayHelloBidiStream(requestStream: $0, responseStream: $1, context: $2) }
      )

    default:
      return nil
    }
  }
}

internal protocol HelloServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'sayHello'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSayHelloInterceptors() -> [ServerInterceptor<HelloRequest, HelloResponse>]

  /// - Returns: Interceptors to use when handling 'sayHelloServerStream'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSayHelloServerStreamInterceptors() -> [ServerInterceptor<HelloRequest, HelloResponse>]

  /// - Returns: Interceptors to use when handling 'sayHelloClientStream'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSayHelloClientStreamInterceptors() -> [ServerInterceptor<HelloRequest, HelloResponse>]

  /// - Returns: Interceptors to use when handling 'sayHelloBidiStream'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSayHelloBidiStreamInterceptors() -> [ServerInterceptor<HelloRequest, HelloResponse>]
}

internal enum HelloServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "HelloService",
    fullName: "HelloService",
    methods: [
      HelloServiceServerMetadata.Methods.sayHello,
      HelloServiceServerMetadata.Methods.sayHelloServerStream,
      HelloServiceServerMetadata.Methods.sayHelloClientStream,
      HelloServiceServerMetadata.Methods.sayHelloBidiStream,
    ]
  )

  internal enum Methods {
    internal static let sayHello = GRPCMethodDescriptor(
      name: "SayHello",
      path: "/HelloService/SayHello",
      type: GRPCCallType.unary
    )

    internal static let sayHelloServerStream = GRPCMethodDescriptor(
      name: "SayHelloServerStream",
      path: "/HelloService/SayHelloServerStream",
      type: GRPCCallType.serverStreaming
    )

    internal static let sayHelloClientStream = GRPCMethodDescriptor(
      name: "SayHelloClientStream",
      path: "/HelloService/SayHelloClientStream",
      type: GRPCCallType.clientStreaming
    )

    internal static let sayHelloBidiStream = GRPCMethodDescriptor(
      name: "SayHelloBidiStream",
      path: "/HelloService/SayHelloBidiStream",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}
/// To build a server, implement a class that conforms to this protocol.
internal protocol GreeterProvider: CallHandlerProvider {
  var interceptors: GreeterServerInterceptorFactoryProtocol? { get }

  func sayHello(request: HelloRequest, context: StatusOnlyCallContext) -> EventLoopFuture<HelloResponse>
}

extension GreeterProvider {
  internal var serviceName: Substring {
    return GreeterServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SayHello":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<HelloRequest>(),
        responseSerializer: ProtobufSerializer<HelloResponse>(),
        interceptors: self.interceptors?.makeSayHelloInterceptors() ?? [],
        userFunction: self.sayHello(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol GreeterAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: GreeterServerInterceptorFactoryProtocol? { get }

  func sayHello(
    request: HelloRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> HelloResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension GreeterAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return GreeterServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return GreeterServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: GreeterServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SayHello":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<HelloRequest>(),
        responseSerializer: ProtobufSerializer<HelloResponse>(),
        interceptors: self.interceptors?.makeSayHelloInterceptors() ?? [],
        wrapping: { try await self.sayHello(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol GreeterServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'sayHello'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSayHelloInterceptors() -> [ServerInterceptor<HelloRequest, HelloResponse>]
}

internal enum GreeterServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Greeter",
    fullName: "Greeter",
    methods: [
      GreeterServerMetadata.Methods.sayHello,
    ]
  )

  internal enum Methods {
    internal static let sayHello = GRPCMethodDescriptor(
      name: "SayHello",
      path: "/Greeter/SayHello",
      type: GRPCCallType.unary
    )
  }
}
